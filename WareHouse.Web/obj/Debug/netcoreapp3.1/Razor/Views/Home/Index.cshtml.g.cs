#pragma checksum "D:\MyProject\OneDrive - OBA GG\C#\Warehouse\WareHouse.Web\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a568a3af8f0753b5b9ec3175b663e80121648507"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\MyProject\OneDrive - OBA GG\C#\Warehouse\WareHouse.Web\Views\Home\Index.cshtml"
using WareHouse.Entity;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a568a3af8f0753b5b9ec3175b663e80121648507", @"/Views/Home/Index.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\MyProject\OneDrive - OBA GG\C#\Warehouse\WareHouse.Web\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "后台首页";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("<div>\r\n    <div id=\"toolbar\">\r\n        <button id=\"add-btn\" class=\"btn btn-cyan\">添加用户</button>\r\n    </div>\r\n    <table class=\"table table-striped table-hover\" id=\"user-table\"></table>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $('#user-table').bootstrapTable({
            url: '/Home/GetPages',         //请求后台的URL（*）
            method: 'get',                      //请求方式（*）
            toolbar: '#toolbar',                //工具按钮用哪个容器
            striped: true,                      //是否显示行间隔色
            cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
            pagination: true,                   //是否显示分页（*）
            sortable: true,                     //是否启用排序
            sortOrder: ""asc"",                   //排序方式
            queryParams: 'queryParams',         //传递参数（*）
            sidePagination: ""server"",           //分页方式：client客户端分页，server服务端分页（*）
            pageNumber:1,                       //初始化加载第一页，默认第一页
            pageSize: 10,                       //每页的记录行数（*）
            pageList: [5, 10, 25, 50],        //可供选择的每页的行数（*）
            smartDisplay:false,
            search: false,                      //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
          ");
                WriteLiteral(@"  strictSearch: true,
            showColumns: false,                 //是否显示所有的列
            showRefresh: true,                 //是否显示刷新按钮
            minimumCountColumns: 2,             //最少允许的列数
            clickToSelect: true,                //是否启用点击选中行
            height: 500,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
            uniqueId: ""ID"",                     //每一行的唯一标识，一般为主键列
            showToggle:false,                   //是否显示详细视图和列表视图的切换按钮
            cardView: false,                    //是否显示详细视图
            detailView: false,                   //是否显示父子表
            //method: 'get',
            //url: ""/Home/GetPages"", //请求路径
            //striped: true, //是否显示行间隔色
            //pageNumber: 1, //初始化加载第一页
            //pagination: true, //是否分页
            //sidePagination: 'client', //server:服务器端分页|client：前端分页
            //pageSize: 5, //单页记录数
            //pageList: [5, 10, 20, 30], //可选择单页记录数
            //showRefresh: true, //刷新按钮
            columns: [");
                WriteLiteral(@"
                {
                    field: ""id"",
                    title: ""主键""
                }, {
                    field: ""name"",
                    title: ""用户名""
                }, {
                    field: ""email"",
                    title: ""邮箱""
                }, {
                    field: ""roleId"",
                    title: ""分组""
                }, {
                    field: ""state"",
                    title: ""状态""
                }, {
                    field: ""id"",
                    title: ""操作"",
                    formatter: function(value, row, index) {
                        var html = '';
                        html += ""<button class='btn btn-default' onclick='edit("" + value + "")'>修改</button>"";
                        html += ""<button class='btn btn-default' onclick='del("" + value + "")'>删除</button>"";
                        return html;
                    }
                }
            ]
        });

        $(""#add-btn"").click(function () {
    ");
                WriteLiteral("        window.location.href = \"");
#nullable restore
#line 81 "D:\MyProject\OneDrive - OBA GG\C#\Warehouse\WareHouse.Web\Views\Home\Index.cshtml"
                               Write(Url.Action("Add"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\";\r\n        });\r\n        function edit(id) {\r\n            window.location.href = \"");
#nullable restore
#line 84 "D:\MyProject\OneDrive - OBA GG\C#\Warehouse\WareHouse.Web\Views\Home\Index.cshtml"
                               Write(Url.Action("Update"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"?id=""+id;
        }
        function del(id) {
            $.post({
                url: '/Home/DeleteUser',
                data: {
                    id:id
                },
                success: function () {
                    $.message(""删除成功"");
                    setTimeout(function() {
                        window.location.href = """);
#nullable restore
#line 95 "D:\MyProject\OneDrive - OBA GG\C#\Warehouse\WareHouse.Web\Views\Home\Index.cshtml"
                                           Write(Url.Action("Index"));

#line default
#line hidden
#nullable disable
                WriteLiteral("\";\r\n                    },2000);\r\n                }\r\n            });\r\n        }\r\n    </script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
